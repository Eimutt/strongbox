diff --git a/strongbox-storage/CoveragePypi.txt b/strongbox-storage/CoveragePypi.txt
new file mode 100644
index 000000000..6b2cb2a5a
--- /dev/null
+++ b/strongbox-storage/CoveragePypi.txt
@@ -0,0 +1,11 @@
+----------------------------                 ----------------------------
+---------------------------- OUTPUT COVERAGE ----------------------------
+----------------------------      PYPI       ----------------------------
+Branch 0 -> true
+Branch 1 -> false
+Branch 2 -> true
+Branch 3 -> true
+Branch 4 -> true
+Branch 5 -> true
+Branch 6 -> true
+Branch 7 -> false
diff --git a/strongbox-storage/CoverageSemantic.txt b/strongbox-storage/CoverageSemantic.txt
new file mode 100644
index 000000000..4018a64a1
--- /dev/null
+++ b/strongbox-storage/CoverageSemantic.txt
@@ -0,0 +1,15 @@
+----------------------------                 ----------------------------
+---------------------------- OUTPUT COVERAGE ----------------------------
+----------------------------    SEMANTIC     ----------------------------
+Branch 0 -> true
+Branch 1 -> true
+Branch 2 -> true
+Branch 3 -> true
+Branch 4 -> true
+Branch 5 -> true
+Branch 6 -> true
+Branch 7 -> false
+Branch 8 -> false
+Branch 9 -> false
+Branch 10 -> false
+Branch 11 -> false
diff --git a/strongbox-storage/strongbox-storage-api/src/main/java/org/carlspring/strongbox/artifact/coordinates/versioning/SemanticVersion.java b/strongbox-storage/strongbox-storage-api/src/main/java/org/carlspring/strongbox/artifact/coordinates/versioning/SemanticVersion.java
index c74890ca4..1ef47f6da 100644
--- a/strongbox-storage/strongbox-storage-api/src/main/java/org/carlspring/strongbox/artifact/coordinates/versioning/SemanticVersion.java
+++ b/strongbox-storage/strongbox-storage-api/src/main/java/org/carlspring/strongbox/artifact/coordinates/versioning/SemanticVersion.java
@@ -28,6 +28,7 @@ import java.util.regex.Matcher;
 import java.util.regex.Pattern;
 
 import org.apache.commons.lang.StringUtils;
+import java.io.PrintWriter;
 
 /**
  * Version following semantic defined by <a href="http://semver.org/">Semantic Versioning</a> document.
@@ -58,7 +59,7 @@ public class SemanticVersion
         SPECIAL
     }
 
-    private static final String FORMAT = "(\\d+)\\.(\\d+)(?:\\.)?(\\d*)(\\.|-|\\+)?([0-9A-Za-z-.]*)?";
+    public static final String FORMAT = "(\\d+)\\.(\\d+)(?:\\.)?(\\d*)(\\.|-|\\+)?([0-9A-Za-z-.]*)?";
 
     private static final Pattern PATTERN = Pattern.compile(SemanticVersion.FORMAT);
 
@@ -584,44 +585,81 @@ public class SemanticVersion
         }
     }
 
+    public static boolean[] cover = new boolean[12];
+
+    public static void outputCoverage(){
+      PrintWriter writer = null;
+      try{
+        writer = new PrintWriter("../../CoverageSemantic.txt", "UTF-8");
+        writer.println("----------------------------                 ----------------------------");
+        writer.println("---------------------------- OUTPUT COVERAGE ----------------------------");
+        writer.println("----------------------------    SEMANTIC     ----------------------------");
+        for (int i = 0 ; i < cover.length; i++) {
+          writer.println("Branch "+i+" -> "+cover[i]);
+        }
+      } catch(Exception e){
+        System.err.println(e);
+      } finally{
+        writer.close();
+      }
+    }
+
+    public static boolean setBranch(int b){
+      cover[b] = true;
+      return true;
+    }
+
     @Override
     public int compareTo(final SemanticVersion other)
     {
+        setBranch(0);
         if (equals(other))
         {
+            setBranch(1);
             return 0;
         }
 
         if (this.major < other.major)
         {
+            setBranch(2);
             return -1;
         }
         else if (this.major == other.major)
         {
+            setBranch(3);
             if (this.minor < other.minor)
             {
+                setBranch(4);
                 return -1;
             }
             else if (this.minor == other.minor)
             {
+                setBranch(5);
                 if (this.patch < other.patch)
                 {
+                    setBranch(6);
                     return -1;
                 }
                 else if (this.patch == other.patch)
                 {
+                    setBranch(7);
                     if (this.special != null && other.special != null)
                     {
+                        setBranch(8);
                         return this.special.compareTo(other.special);
                     }
                     else if (other.special != null)
                     {
+                        setBranch(9);
                         return 1;
                     }
                     else if (this.special != null)
                     {
+                        setBranch(10);
                         return -1;
-                    } // else handled by previous equals check
+                    }
+                    setBranch(11);
+                    // else handled by previous equals check
                 }
             }
         }
diff --git a/strongbox-storage/strongbox-storage-layout-providers/strongbox-storage-nuget-layout-provider/src/test/java/org/carlspring/strongbox/storage/metadata/nuget/NuspecTest.java b/strongbox-storage/strongbox-storage-layout-providers/strongbox-storage-nuget-layout-provider/src/test/java/org/carlspring/strongbox/storage/metadata/nuget/NuspecTest.java
index 94cc6ef4c..b16048132 100644
--- a/strongbox-storage/strongbox-storage-layout-providers/strongbox-storage-nuget-layout-provider/src/test/java/org/carlspring/strongbox/storage/metadata/nuget/NuspecTest.java
+++ b/strongbox-storage/strongbox-storage-layout-providers/strongbox-storage-nuget-layout-provider/src/test/java/org/carlspring/strongbox/storage/metadata/nuget/NuspecTest.java
@@ -103,6 +103,7 @@ public class NuspecTest
         assertThat(result.isRequireLicenseAcceptance()).as("License Verification Required").isFalse();
         assertThat(result.getDescription()).as("Description").isEqualTo("Implementing ProjecWise API isolation level contracts");
         assertThat(result.getCopyright()).as("Rights").isEqualTo("NEOLANT");
+        SemanticVersion.outputCoverage();
     }
 
     /**
diff --git a/strongbox-storage/strongbox-storage-layout-providers/strongbox-storage-pypi-layout-provider/src/main/java/org/carlspring/strongbox/artifact/coordinates/PypiArtifactCoordinates.java b/strongbox-storage/strongbox-storage-layout-providers/strongbox-storage-pypi-layout-provider/src/main/java/org/carlspring/strongbox/artifact/coordinates/PypiArtifactCoordinates.java
index 67eb6756d..0c204dacf 100644
--- a/strongbox-storage/strongbox-storage-layout-providers/strongbox-storage-pypi-layout-provider/src/main/java/org/carlspring/strongbox/artifact/coordinates/PypiArtifactCoordinates.java
+++ b/strongbox-storage/strongbox-storage-layout-providers/strongbox-storage-pypi-layout-provider/src/main/java/org/carlspring/strongbox/artifact/coordinates/PypiArtifactCoordinates.java
@@ -8,17 +8,18 @@ import javax.xml.bind.annotation.XmlAccessType;
 import javax.xml.bind.annotation.XmlAccessorType;
 import javax.xml.bind.annotation.XmlRootElement;
 import java.util.Map;
+import java.io.PrintWriter;
 
 import org.apache.commons.lang3.StringUtils;
 
 /**
  * This class is an {@link ArtifactCoordinates} implementation for pypi artifacts
  *
- * Proper path for this coordinates is in the format of: 
+ * Proper path for this coordinates is in the format of:
  * {distribution}-{version}(-{build tag})?-{python tag}-{abi tag}-{platform tag}.whl.
  * for wheel packages and {distribution}-{version}.tar.gz for source packages
  * Examples: distribution-1.0.1-1-py27-none-any.whl, distribution-1.0.1.tar.gz
- * 
+ *
  * @author alecg956
  */
 @Entity
@@ -52,6 +53,30 @@ public class PypiArtifactCoordinates
 
     public static final String WHEEL_EXTENSION = "whl";
 
+    public static boolean[] cover = new boolean[8];
+
+    public static void outputCoverage(){
+      PrintWriter writer = null;
+      try{
+        writer = new PrintWriter("../../CoveragePypi.txt", "UTF-8");
+        writer.println("----------------------------                 ----------------------------");
+        writer.println("---------------------------- OUTPUT COVERAGE ----------------------------");
+        writer.println("----------------------------      PYPI       ----------------------------");
+        for (int i = 0 ; i < cover.length; i++) {
+          writer.println("Branch "+i+" -> "+cover[i]);
+        }
+      } catch(Exception e){
+        System.err.println(e);
+      } finally{
+        writer.close();
+      }
+    }
+
+    public static boolean setBranch(int b){
+      cover[b] = true;
+      return true;
+    }
+
     public PypiArtifactCoordinates()
     {
         resetCoordinates(DISTRIBUTION,
@@ -63,6 +88,7 @@ public class PypiArtifactCoordinates
                          PACKAGING);
     }
 
+
     /**
      * This method takes in all artifact coordinates of a PyPi package filename, with build being
      * the empty string if it is not included in the filename
@@ -84,21 +110,25 @@ public class PypiArtifactCoordinates
                                    String packaging)
     {
         this();
-
+        setBranch(0);
         if (StringUtils.isBlank(packaging))
         {
+            setBranch(1);
             throw new IllegalArgumentException("The packaging field is mandatory.");
         }
 
         if (!packaging.equals(SOURCE_EXTENSION) && !packaging.equals(WHEEL_EXTENSION))
         {
+            setBranch(2);
             throw new IllegalArgumentException("The artifact has incorrect packaging");
         }
 
         if (packaging.equals(SOURCE_EXTENSION))
         {
+            setBranch(3);
             if (StringUtils.isBlank(distribution) || StringUtils.isBlank(version))
             {
+                setBranch(4);
                 throw new IllegalArgumentException(
                         "The distribution and version fields are mandatory for source package.");
             }
@@ -106,15 +136,18 @@ public class PypiArtifactCoordinates
 
         if (packaging.equals(WHEEL_EXTENSION))
         {
+            setBranch(5);
             if (StringUtils.isBlank(distribution) || StringUtils.isBlank(version) || StringUtils.isBlank(platform)
                 || StringUtils.isBlank(languageImplementationVersion) || StringUtils.isBlank(abi))
             {
+                setBranch(6);
                 throw new IllegalArgumentException("The distribution, version, languageImplementationVersion, abi, and " +
                                                    "platform fields are mandatory for wheel package.");
             }
 
             if (!StringUtils.isBlank(build) && !Character.isDigit(build.charAt(0)))
             {
+                setBranch(7);
                 throw new IllegalArgumentException("Illegal build tag!");
             }
         }
diff --git a/strongbox-storage/strongbox-storage-layout-providers/strongbox-storage-pypi-layout-provider/src/test/java/org/carlspring/strongbox/artifact/coordinates/PypiArtifactCoordinatesTest.java b/strongbox-storage/strongbox-storage-layout-providers/strongbox-storage-pypi-layout-provider/src/test/java/org/carlspring/strongbox/artifact/coordinates/PypiArtifactCoordinatesTest.java
index d1a5165ff..1d7ab5c6f 100644
--- a/strongbox-storage/strongbox-storage-layout-providers/strongbox-storage-pypi-layout-provider/src/test/java/org/carlspring/strongbox/artifact/coordinates/PypiArtifactCoordinatesTest.java
+++ b/strongbox-storage/strongbox-storage-layout-providers/strongbox-storage-pypi-layout-provider/src/test/java/org/carlspring/strongbox/artifact/coordinates/PypiArtifactCoordinatesTest.java
@@ -3,6 +3,7 @@ package org.carlspring.strongbox.artifact.coordinates;
 import org.junit.jupiter.api.RepeatedTest;
 import org.junit.jupiter.api.RepetitionInfo;
 import org.junit.jupiter.api.Test;
+import org.junit.jupiter.api.AfterAll;
 import static org.assertj.core.api.Assertions.assertThat;
 import static org.assertj.core.api.Assertions.assertThatExceptionOfType;
 
@@ -10,7 +11,7 @@ import java.util.*;
 
 /**
  * Class to test the functionality of PypiArtifactCoordinates and PypiArtifactCoordinatesUtils
- * 
+ *
  * @author alecg956
  */
 public class PypiArtifactCoordinatesTest
@@ -224,7 +225,7 @@ public class PypiArtifactCoordinatesTest
     }
 
     /**
-     * Test that the parser handles the case that build tag is specified but empty and if the build tag is 
+     * Test that the parser handles the case that build tag is specified but empty and if the build tag is
      * specified but does not start with a number
      */
     @Test
@@ -256,4 +257,9 @@ public class PypiArtifactCoordinatesTest
 
         assertThat(coordsParsed.toString()).isEqualTo(expectedPackagePath);
     }
+
+    @AfterAll
+    public static void getCoverage(){
+      PypiArtifactCoordinates.outputCoverage();
+    }
 }
